(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{371:function(t,s,e){"use strict";e.r(s);var n=e(44),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"选项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[t._v("#")]),t._v(" 选项")]),t._v(" "),e("h2",{attrs:{id:"配置项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置项"}},[t._v("#")]),t._v(" 配置项")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ torch --help\n  Usage: torch [options]\n  Options\n    -V, --·version                           output the version number\n    -C, --no-colors                         force disabling of colors\n    -O, --reporter-options <k=v,k2=v2,...>  reporter-specific options\n    -R, --reporter <name>                   specify the reporter to use (default: spec)\n    -S, --sort                              sort test files\n    -b, --bail                              bail after first test failure\n    -g, --grep <pattern>                    only run tests matching <pattern>\n    -f, --fgrep <string>                    only run tests containing <string>\n    -i, --invert                            inverts --grep and --fgrep matches\n    -r, --require <name>                    require the given module (default: )\n    -s, --slow <ms>                         "slow" test threshold in milliseconds [75]\n    -t, --timeout <ms>                      set test-case timeout in milliseconds [2000]\n    -u, --ui <name>                         specify user-interface (bdd|tdd|exports) (default: bdd)\n    --check-leaks                           check for global variable leaks\n    --compile                               compile with babel\n    --compile-opts <path>                   path of compile options\n    --compilers <ext>:<module>,...          use the given module(s) to compile files (default: )\n    --coverage                              report coverage\n    --debug                                 enable Electron debugger on port [5858]; for --renderer tests show window and dev-tools\n    --debug-brk                             like --debug but pauses the script on the first line\n    --dom-global                            enable DOM in Node.js by using jsdom-global\n    --dom-global-loose                      enable DOM in Node.js, while window can be modified\n    --globals <names>                       allow the given comma-delimited global [names] (default: )\n    --inline-diffs                          display actual/expected differences inline within each string\n    --interactive                           run tests in renderer process in a visible window that can be reloaded to re-run tests\n    --interfaces                            display available interfaces\n    --no-timeouts                           disables timeouts\n    --notify-on-fail                        notify on failures\n    --notify-on-success                     notify on success\n    --opts <path>                           specify opts path (default: test/mocha.opts)\n    --preload <name>                        preload the given script in renderer process (default: )\n    --recursive                             include sub directories\n    --renderer                              run tests in renderer process\n    --require-main <name>                   load the given script in main process before executing tests (default: )\n    --source-pattern <sources>              glob pattern of source files (default: index.js,lib/**/*.js,src/**/*.js)\n    --watch                                 watching source file changes\n    --watch-aggregate-timeout               delay time for re-run test cases after files changed\n    --http                                  switch it http protocol runtime\n    -h, --help                              output usage information\n')])])]),e("h2",{attrs:{id:"compile-opts-path"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compile-opts-path"}},[t._v("#")]),t._v(" --compile-opts "),e("code",[t._v("<path>")])]),t._v(" "),e("blockquote",[e("p",[t._v("experimental")])]),t._v(" "),e("p",[t._v("specify a js file providing compile options. default path is "),e("code",[t._v("${process.cwd()}/.torch.compile.opts.js")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  babelrc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// babelrc")]),t._v("\n    presets"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'es2015'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stage-0'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sourceMaps"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inline'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  extensions"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.es6'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.es'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.jsx'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  include"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// glob expressions to detect files to include")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'index.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lib/**/*.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/**/*.js'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  exclude"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// glob expressions to detect files to exclude")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bower_components/**'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node_modules/**'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);